# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-appsync-backend # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-2

plugins:
  - serverless-appsync-plugin

custom:
  apiname: ${self:provider.stage}-app-sync
  accountId: { Ref: AWS::AccountId }
  appSync:
    name: ${self:custom.apiname}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: { Ref: AWS::Region }
      defaultAction: ALLOW
      userPoolId: { Ref: UserPool }
    schema: schema.graphql # In case you want to change it
    dataSources:
      - type: AMAZON_DYNAMODB
        name: NotesTableDS
        description: "DynamoDB Notes Table"
        config:
          tableName: { Ref: DynamoDBNotesTable }
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
    mappingTemplates:
      - dataSource: NotesTableDS
        type: Query
        field: allNotes
        request: "allNotes-request.vtl"
        response: "allNotes-response.vtl"
      - dataSource: NotesTableDS
        type: Query
        field: getNote
        request: "getNote-request.vtl"
        response: "common-response.vtl"
      - dataSource: NotesTableDS
        type: Mutation
        field: saveNote
        request: "saveNote-request.vtl"
        response: "common-response.vtl"
      - dataSource: NotesTableDS
        type: Mutation
        field: deleteNote
        request: "deleteNote-request.vtl"
        response: "common-response.vtl"

resources:
  Resources:
    SNSRole:
      Type: AWS::IAM::Role
      Description: "An IAM Role to allow Cognito to send SNS messages"
      Properties:
        RoleName: ${self:custom.apiname}-cognito-sns-role
        ManagedPolicyArns:
          - Ref: CognitoSNSPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - cognito-idp.amazonaws.com
      DependsOn:
        - CognitoSNSPolicy

    CognitoSNSPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: "Managed policy to allow Amazon Cognito to access SNS"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sns:publish
              Resource: "*"

    UserPool:
      Type: "AWS::Cognito::UserPool"
      Description: "A Cognito user pool for authenticating users"
      Properties:
        UserPoolName: ${self:custom.apiname}-user-pool
        AutoVerifiedAttributes:
          - phone_number
        MfaConfiguration: "ON"
        SmsConfiguration:
          ExternalId: ${self:custom.apiname}-external
          SnsCallerArn: { Fn::GetAtt: [ SNSRole, Arn ] }
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: false
            Required: true

    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Description: "App Client used by AWS AppSync"
      Properties:
        ClientName: ${self:custom.apiname}-appsync-client
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }

    DynamoDBNotesTable:
      Type: "AWS::DynamoDB::Table"
      Description: "Data store for AWS AppSync Notes Type"
      Properties:
        TableName: ${self:custom.apiname}-notes-table
        AttributeDefinitions:
          - AttributeName: "NoteId"
            AttributeType: "S"
          - AttributeName: "UserId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "NoteId"
            KeyType: "HASH"
          - AttributeName: "UserId"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    DynamoDBRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.apiname}-appsync-dynamodb-role
        ManagedPolicyArns:
          - Ref: AppSyncDynamoDBPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - appsync.amazonaws.com
      DependsOn:
        - AppSyncDynamoDBPolicy

    AppSyncDynamoDBPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Managed policy to allow AWS AppSync to access the tables created by this template.
        Path: /appsync/
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
              Resource: { Fn::Join: [ '', [ { Fn::GetAtt: [ DynamoDBNotesTable, Arn ] }, '*' ] ] }